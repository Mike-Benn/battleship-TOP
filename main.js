(()=>{"use strict";var e={365:(e,n,r)=>{r.d(n,{A:()=>l});var t=r(354),a=r.n(t),o=r(314),i=r.n(o)()(a());i.push([e.id,"/*   Variables   */\n\n:root {\n    --primary-color: #EEEEEE;\n    --secondary-color: #222222;\n}\n\n/*   General tags   */\n\n* {\n    margin: 0;\n    padding: 0;   \n    background-color: var(--primary-color);\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nh1 {\n    font-family: 'Anton', sans-serif;\n}\n\np {\n    font-size: 2em;\n}\n\n/*   Containers   */\n\n.page-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 25px;\n    margin-top: 1vw;\n\n}\n\n.grid-container-holder {\n    display: flex;\n    gap: 40px;\n}\n\n.computer-board , .player-board {\n    display: flex;\n    flex-direction: row;\n    gap: 2vw;\n    \n}\n\n.ship-display-computer , .ship-display-human {\n    display: flex;\n    flex-direction: column;\n    gap: 1vw;\n    align-self: center;\n}\n\n.board-holder {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\n.grid-container-player , .grid-container-computer , .pregame-grid {\n    position: relative;\n    display: grid;\n    grid-template-columns: repeat(10 , 1fr);\n    margin: 0;\n    padding: 0;\n}\n\n.ship-container {\n    display: flex;\n    gap: 4px;\n}\n\n/*   Buttons   */  \n\n.rotate-btn {\n    width: 9vw;\n    height: 7vh;\n    cursor: pointer;\n    border: none;\n    outline: none;\n    border-radius: 10px;\n    background-color: black;\n    color: var(--primary-color);\n}\n\n.play-again-btn {\n    width: 15vw;\n    height: 12vh;\n    cursor: pointer;\n    border: none;\n    outline: none;\n    border-radius: 10px;\n    background-color: black;\n    color: var(--primary-color);\n}\n\n/*   Squares   */\n\n.ship-health {\n    width: 1vw;\n    border: 1px solid black;\n    aspect-ratio: 1;   \n    background-color: var(--secondary-color);\n}\n    \n.pregame-square {\n    width: 1.5vw;\n    border: 1px solid black;\n    aspect-ratio: 1;\n}\n\n.grid-square {\n    width: 2.5vw;\n    border: 1px solid black;\n    aspect-ratio: 1;\n}\n\n.computer-square {\n    transition: background-color 0.2s ease;\n}\n\n.computer-square:hover {\n    background-color: #bcbcbc;\n}\n\n/*   Popup menus   */\n\n#popup {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50% , -50%);\n    width: 35vw;\n    height: 45vh;\n    padding: 3vh;\n    box-sizing: border-box;\n    border-radius: 10px;\n    background-color: var(--primary-color);\n    z-index: 101;  \n}\n\n#pregame {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50% , -50%);\n    width: 35vw;\n    height: 85vh;\n    box-sizing: border-box;\n    border-radius: 10px;\n    background-color: var(--primary-color);\n    z-index: 101;\n}\n\n/*   Overlays and visibility mutators   */\n\n.sunk {\n    background-color: var(--primary-color);\n}\n\n.hidden {\n    display: none;\n}\n\n.faded {\n    opacity: 0.2;\n}\n\n.visible {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n#overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 100;\n}\n\n.computer-grid-overlay , .player-grid-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    display: none;\n    z-index: 100;\n    opacity: 0.8;\n}\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA,kBAAkB;;AAElB;IACI,wBAAwB;IACxB,0BAA0B;AAC9B;;AAEA,qBAAqB;;AAErB;IACI,SAAS;IACT,UAAU;IACV,sCAAsC;IACtC,yCAAyC;AAC7C;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,cAAc;AAClB;;AAEA,mBAAmB;;AAEnB;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,eAAe;;AAEnB;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;;AAEZ;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,uCAAuC;IACvC,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,QAAQ;AACZ;;AAEA,gBAAgB;;AAEhB;IACI,UAAU;IACV,WAAW;IACX,eAAe;IACf,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,2BAA2B;AAC/B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,eAAe;IACf,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,2BAA2B;AAC/B;;AAEA,gBAAgB;;AAEhB;IACI,UAAU;IACV,uBAAuB;IACvB,eAAe;IACf,wCAAwC;AAC5C;;AAEA;IACI,YAAY;IACZ,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,yBAAyB;AAC7B;;AAEA,oBAAoB;;AAEpB;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,iCAAiC;IACjC,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,sCAAsC;IACtC,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,iCAAiC;IACjC,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,sCAAsC;IACtC,YAAY;AAChB;;AAEA,yCAAyC;;AAEzC;IACI,sCAAsC;AAC1C;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,oCAAoC;IACpC,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,YAAY;IACZ,WAAW;IACX,aAAa;IACb,YAAY;IACZ,YAAY;AAChB",sourcesContent:["/*   Variables   */\r\n\r\n:root {\r\n    --primary-color: #EEEEEE;\r\n    --secondary-color: #222222;\r\n}\r\n\r\n/*   General tags   */\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;   \r\n    background-color: var(--primary-color);\r\n    font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\nh1 {\r\n    font-family: 'Anton', sans-serif;\r\n}\r\n\r\np {\r\n    font-size: 2em;\r\n}\r\n\r\n/*   Containers   */\r\n\r\n.page-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 25px;\r\n    margin-top: 1vw;\r\n\r\n}\r\n\r\n.grid-container-holder {\r\n    display: flex;\r\n    gap: 40px;\r\n}\r\n\r\n.computer-board , .player-board {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 2vw;\r\n    \r\n}\r\n\r\n.ship-display-computer , .ship-display-human {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1vw;\r\n    align-self: center;\r\n}\r\n\r\n.board-holder {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\n.grid-container-player , .grid-container-computer , .pregame-grid {\r\n    position: relative;\r\n    display: grid;\r\n    grid-template-columns: repeat(10 , 1fr);\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.ship-container {\r\n    display: flex;\r\n    gap: 4px;\r\n}\r\n\r\n/*   Buttons   */  \r\n\r\n.rotate-btn {\r\n    width: 9vw;\r\n    height: 7vh;\r\n    cursor: pointer;\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 10px;\r\n    background-color: black;\r\n    color: var(--primary-color);\r\n}\r\n\r\n.play-again-btn {\r\n    width: 15vw;\r\n    height: 12vh;\r\n    cursor: pointer;\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 10px;\r\n    background-color: black;\r\n    color: var(--primary-color);\r\n}\r\n\r\n/*   Squares   */\r\n\r\n.ship-health {\r\n    width: 1vw;\r\n    border: 1px solid black;\r\n    aspect-ratio: 1;   \r\n    background-color: var(--secondary-color);\r\n}\r\n    \r\n.pregame-square {\r\n    width: 1.5vw;\r\n    border: 1px solid black;\r\n    aspect-ratio: 1;\r\n}\r\n\r\n.grid-square {\r\n    width: 2.5vw;\r\n    border: 1px solid black;\r\n    aspect-ratio: 1;\r\n}\r\n\r\n.computer-square {\r\n    transition: background-color 0.2s ease;\r\n}\r\n\r\n.computer-square:hover {\r\n    background-color: #bcbcbc;\r\n}\r\n\r\n/*   Popup menus   */\r\n\r\n#popup {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50% , -50%);\r\n    width: 35vw;\r\n    height: 45vh;\r\n    padding: 3vh;\r\n    box-sizing: border-box;\r\n    border-radius: 10px;\r\n    background-color: var(--primary-color);\r\n    z-index: 101;  \r\n}\r\n\r\n#pregame {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50% , -50%);\r\n    width: 35vw;\r\n    height: 85vh;\r\n    box-sizing: border-box;\r\n    border-radius: 10px;\r\n    background-color: var(--primary-color);\r\n    z-index: 101;\r\n}\r\n\r\n/*   Overlays and visibility mutators   */\r\n\r\n.sunk {\r\n    background-color: var(--primary-color);\r\n}\r\n\r\n.hidden {\r\n    display: none;\r\n}\r\n\r\n.faded {\r\n    opacity: 0.2;\r\n}\r\n\r\n.visible {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n}\r\n\r\n#overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 100;\r\n}\r\n\r\n.computer-grid-overlay , .player-grid-overlay {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: none;\r\n    z-index: 100;\r\n    opacity: 0.8;\r\n}\r\n"],sourceRoot:""}]);const l=i},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);t&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},354:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],d=t.base?s[0]+t.base:s[0],c=o[d]||0,A="".concat(d," ").concat(c);o[d]=c+1;var u=r(A),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var g=a(p,t);t.byIndex=l,n.splice(l,0,{identifier:A,updater:g,references:1})}i.push(A)}return i}function a(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,a){var o=t(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=r(o[i]);n[l].references--}for(var s=t(e,a),d=0;d<o.length;d++){var c=r(o[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=s}}},659:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,a&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var a=n[t];if(void 0!==a)return a.exports;var o=n[t]={id:t,exports:{}};return e[t](o,o.exports,r),o.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nc=void 0,(()=>{var e=r(72),n=r.n(e),t=r(825),a=r.n(t),o=r(659),i=r.n(o),l=r(56),s=r.n(l),d=r(540),c=r.n(d),A=r(113),u=r.n(A),p=r(365),g={};function m(e,n){const r=e,t=n;let a=e,o=!1,i=0;const l=()=>o;return{getSize:()=>r,getHealth:()=>a,getType:()=>t,getOrientation:()=>i,toggleOrientation:()=>{i=0===i?1:0},randomOrientation:()=>{i=0===Math.floor(2*Math.random())?0:1},isSunk:l,hit:()=>{!1===l()&&(a--,a<=0&&(o=!0))}}}function h(){let e=null;return{getOccupiedBy:()=>e,setOccupiedBy:n=>e=n}}function f(){let e=[[],[],[],[],[],[],[],[],[],[]],n={0:[],1:[],2:[],3:[],4:[],5:[],6:[],7:[],8:[],9:[]},r={0:[],1:[],2:[],3:[],4:[],5:[],6:[],7:[],8:[],9:[]},t=[],a={0:[],1:[],2:[],3:[],4:[],5:[],6:[],7:[],8:[],9:[]},o=[],i=[];const l=e=>i.push(e),s=()=>{e=[[],[],[],[],[],[],[],[],[],[]]},d=()=>{s();for(let n=0;n<e.length;n++)for(let r=0;r<e.length;r++){let a=h(),o=[n,r];t.push(o),e[n][r]=a}},c=(e,n)=>{let r=n[0],t=n[1];if(0===e.getOrientation()){for(let n=0;n<e.getSize();n++){if(!A(r,t))return!1;t++}return!0}if(1===e.getOrientation()){for(let n=0;n<e.getSize();n++){if(!A(r,t))return!1;r++}return!0}},A=(e,n)=>!(e>9||n>9)&&null===u(e,n).getOccupiedBy(),u=(n,r)=>n<0||n>9||r<0||r>9?"The coordinates entered are out of bounds, please choose a row and column value between 0 and 9.":e[n][r],p=(e,n,r)=>{if(l(e),0===e.getOrientation())for(let t=0;t<e.getSize();t++)a[n].push(r),u(n,r).setOccupiedBy(e),r++;else for(let t=0;t<e.getSize();t++)a[n].push(r),u(n,r).setOccupiedBy(e),n++},g=(e,t)=>{let i=a[e];if(t=parseInt(t),i.includes(t)){let a=u(e,t).getOccupiedBy();a.hit(),a.isSunk()&&o.push(a),r[e].push(t),n[e].push(t)}else r[e].push(t)};return{getSpaceAt:u,getHitSquares:()=>n,getActiveSquares:()=>t,getInactiveSquares:()=>r,getSunkenShips:()=>o,getShipList:()=>i,addShip:l,resetBoard:s,generateBoard:d,generateRandomBoard:()=>{s(),d();let e=[...t];const n=[m(5,"carrier"),m(4,"battleship"),m(3,"submarine"),m(2,"patrol")];for(let r=0;r<n.length;r++){let a=n[r];for(a.randomOrientation();;){let n=Math.floor(Math.random()*e.length),r=e[n];if(c(a,[r[0],r[1]])){p(a,r[0],r[1]);break}e.splice(n,1)}e=[...t]}},validatePlacement:c,validateSquare:A,placeShip:p,receiveAttack:g,isGameOver:()=>4===o.length,randomPlay:()=>{let e=t.length,n=Math.floor(Math.random()*e),r=t[n];g(r[0],r[1]),t.splice(n,1)}}}function C(e,n){let r=e,t=null,a=n;return{getName:()=>r,getGameBoard:()=>t,getPlayerType:()=>a,setGameBoard:e=>t=e,createGameBoard:()=>{let e=f();"Computer"===n?(e.generateRandomBoard(),t=e):(e.generateBoard(),t=e)},resetGameBoard:()=>{t=null}}}function v(){let e=[m(5,"carrier"),m(4,"battleship"),m(3,"submarine"),m(2,"patrol")];return{getShips:()=>e,removeShip:()=>{e.length>0&&e.shift()}}}g.styleTagTransform=u(),g.setAttributes=s(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=c(),n()(p.A,g),p.A&&p.A.locals&&p.A.locals;let y=function(){let e=null,n=[],r=v(),t=document.querySelector(".play-again-btn"),a=document.querySelector(".rotate-btn"),o=document.querySelector("#overlay"),i=document.querySelector("#pregame");const l=()=>{if(0!==r.getShips().length){let n=document.querySelector(".pregame-grid"),r=e.getPregameBoard();for(;n.firstChild;)n.removeChild(n.firstChild);for(let e=0;e<10;e++)for(let t=0;t<10;t++){let a=document.createElement("div");a.classList.add("pregame-square"),a.dataset.value=""+e+t,null!==r.getSpaceAt(e,t).getOccupiedBy()?(a.style.backgroundColor="#444444",a.addEventListener("mouseenter",g),a.addEventListener("mouseleave",m),n.appendChild(a)):(a.style.backgroundColor="#ffffff",a.addEventListener("click",h),a.addEventListener("mouseenter",g),a.addEventListener("mouseleave",m),n.appendChild(a))}}else o.classList.remove("visible"),i.classList.remove("visible"),o.classList.add("hidden"),i.classList.add("hidden"),e.getPlayerOne().setGameBoard(e.getPregameBoard()),e.startGame(),s()},s=()=>{let n=document.querySelector(".grid-container-player"),r=document.querySelector(".grid-container-computer");for(;n.firstChild;)n.removeChild(n.firstChild);for(;r.firstChild;)r.removeChild(r.firstChild);(()=>{let n=document.querySelector(".grid-container-player"),r=document.createElement("div");r.classList.add("player-grid-overlay"),n.appendChild(r);let t=e.getPlayerOne().getGameBoard();for(let e=0;e<10;e++)for(let r=0;r<10;r++){let a=document.createElement("div");a.classList.add("grid-square"),null!==t.getSpaceAt(e,r).getOccupiedBy()?t.getHitSquares()[e].includes(r)?(a.style.backgroundColor="#fa6a60",n.appendChild(a)):(a.style.backgroundColor="#98FB98",n.appendChild(a)):t.getInactiveSquares()[e].includes(r)?(a.style.backgroundColor="black",n.appendChild(a)):n.appendChild(a)}})(),(()=>{let n=document.querySelector(".grid-container-computer"),r=document.createElement("div");r.classList.add("computer-grid-overlay"),n.appendChild(r);let t=e.getPlayerTwo().getGameBoard();for(let e=0;e<10;e++)for(let r=0;r<10;r++){let a=document.createElement("div");a.classList.add("grid-square"),a.classList.add("computer-square"),a.dataset.value=""+e+r,null!==t.getSpaceAt(e,r).getOccupiedBy()?t.getHitSquares()[e].includes(r)?(a.style.backgroundColor="#fa6a60",n.appendChild(a)):(a.addEventListener("click",y),n.appendChild(a)):t.getInactiveSquares()[e].includes(r)?(a.style.backgroundColor="black",n.appendChild(a)):(a.addEventListener("click",y),n.appendChild(a))}})(),d(),B()?b():0===e.getTurn()?c():u()},d=()=>{let n=document.querySelector(".ship-display-human"),r=document.querySelector(".ship-display-computer"),t=e.getPlayerOne().getGameBoard().getShipList(),a=e.getPlayerTwo().getGameBoard().getShipList();if("live"===e.getPhase())if(0===e.getTurn()){for(;n.firstChild;)n.removeChild(n.firstChild);for(let e=0;e<t.length;e++){let r=t[e],a=r.getSize(),o=document.createElement("div");if(o.classList.add("ship-container"),r.isSunk())for(let e=0;e<a;e++){let e=document.createElement("div");e.classList.add("ship-health","sunk"),o.appendChild(e)}else for(let e=0;e<a;e++){let e=document.createElement("div");e.classList.add("ship-health"),o.appendChild(e)}n.appendChild(o)}}else{for(;r.firstChild;)r.removeChild(r.firstChild);for(let e=0;e<a.length;e++){let n=a[e],t=n.getSize(),o=document.createElement("div");if(o.classList.add("ship-container"),n.isSunk())for(let e=0;e<t;e++){let e=document.createElement("div");e.classList.add("ship-health","sunk"),o.appendChild(e)}else for(let e=0;e<t;e++){let e=document.createElement("div");e.classList.add("ship-health"),o.appendChild(e)}r.appendChild(o)}}},c=()=>{let n=document.querySelector(".player-grid-overlay"),r=document.querySelector(".computer-grid-overlay");"live"===e.getPhase()?0===e.getTurn()?(n.style.display="block",r.style.display="none"):(n.style.display="none",r.style.display="block"):(n.style.display="none",r.style.display="none")},A=()=>{e=function(){let e=C("Player","Human"),n=C("CPU","Computer"),r=f(),t=0,a="pregame";return{getPlayerOne:()=>e,getPlayerTwo:()=>n,getPregameBoard:()=>r,getTurn:()=>t,getPhase:()=>a,switchTurn:()=>{t=0===t?1:0},startGame:()=>{a="live"}}}(),e.getPlayerOne().createGameBoard(),e.getPlayerTwo().createGameBoard(),e.getPregameBoard().generateBoard(),o.classList.remove("hidden"),i.classList.remove("hidden"),o.classList.add("visible"),i.classList.add("visible"),s(),l()},u=()=>{c(),setTimeout((()=>{e.getPlayerOne().getGameBoard().randomPlay(),e.switchTurn(),s()}),800)};function p(e){r.getShips()[0].toggleOrientation()}function g(t){let a=t.target,o=t.target.dataset.value,i=parseInt(o.charAt(0)),l=parseInt(o.charAt(1)),s=e.getPregameBoard(),d=r.getShips()[0],c=d.getSize();if(s.validatePlacement(d,[i,l])){let e=i,r=l;if(s.getSpaceAt(e,r),0===d.getOrientation())for(let t=0;t<c&&a;t++)a.style.backgroundColor="#98fb98",n.push(a),r++,a=document.querySelector(`[data-value^="${e}${r}"]`);else for(let t=0;t<c&&a;t++)a.style.backgroundColor="#98fb98",n.push(a),e++,a=document.querySelector(`[data-value^="${e}${r}"]`)}else{let e=i,r=l;if(s.getSpaceAt(e,r),0===d.getOrientation())for(let t=0;t<c&&a;t++)a.style.backgroundColor="#fa6a60",n.push(a),r++,a=document.querySelector(`[data-value^="${e}${r}"]`);else for(let t=0;t<c&&a;t++)a.style.backgroundColor="#fa6a60",n.push(a),e++,a=document.querySelector(`[data-value^="${e}${r}"]`)}}function m(r){for(let r=0;r<n.length;r++){let t=n[r],a=t.dataset.value,o=a.charAt(0),i=a.charAt(1);null===e.getPregameBoard().getSpaceAt(o,i).getOccupiedBy()?t.style.backgroundColor="#ffffff":t.style.backgroundColor="#444444"}n=[]}function h(n){let t=n.target.dataset.value,a=parseInt(t.charAt(0)),o=parseInt(t.charAt(1)),i=e.getPregameBoard(),s=r.getShips()[0];i.validatePlacement(s,[a,o])&&(i.placeShip(s,a,o),r.removeShip(),l())}function y(n){const r=n.target.dataset.value,t=r.charAt(0),a=r.charAt(1);e.getTurn(),e.getPlayerTwo().getGameBoard().receiveAttack(t,a),e.switchTurn(),s()}const B=()=>!(!e.getPlayerOne().getGameBoard().isGameOver()&&!e.getPlayerTwo().getGameBoard().isGameOver()),b=()=>{e.getPlayerOne().getGameBoard().isGameOver()?I("The CPU"):e.getPlayerTwo().getGameBoard().isGameOver()&&I("You")},I=e=>{let n=document.querySelector("#popup"),r=document.querySelector("#overlay");document.querySelector(".game-result").textContent=`${e} won!`,n.classList.remove("hidden"),r.classList.remove("hidden"),n.classList.add("visible")};function S(t){let a=document.querySelector("#popup"),o=document.querySelector("#overlay");a.classList.remove("visible"),o.classList.remove("visible"),a.classList.add("hidden"),o.classList.add("hidden"),e=null,n=[],r=v(),A(),(()=>{let e=document.querySelector(".ship-display-human"),n=document.querySelector(".ship-display-computer"),t=r.getShips();for(;e.firstChild;)e.removeChild(e.firstChild),n.removeChild(n.firstChild);for(let r=0;r<t.length;r++){let a=t[r].getSize(),o=document.createElement("div"),i=document.createElement("div");o.classList.add("ship-container"),i.classList.add("ship-container");for(let e=0;e<a;e++){let e=document.createElement("div"),n=document.createElement("div");e.classList.add("ship-health"),n.classList.add("ship-health"),o.appendChild(e),i.appendChild(n)}e.appendChild(o),n.appendChild(i)}})()}return{loadGame:A,updateMainScreen:s,setup:()=>{t.addEventListener("click",S),a.addEventListener("click",p)}}}();y.setup(),y.loadGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,